name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: |
        go mod download
        go mod verify

    - name: Run gofmt
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Code is not formatted:"
          gofmt -l .
          exit 1
        fi

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

    - name: Run golangci-lint
      run: golangci-lint run --timeout=5m

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run vulnerability check
      run: govulncheck ./...

  # 测试
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21', '1.22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Run unit tests
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./internal/... ./pkg/...

    - name: Run integration tests
      run: |
        go test -v -timeout=5m ./test/... || true

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  # 构建
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Set version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=dev-${GITHUB_SHA::8}
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Build binaries
      run: |
        ./scripts/build_release.sh --version ${{ steps.version.outputs.VERSION }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ steps.version.outputs.VERSION }}
        path: dist/
        retention-days: 30

  # Docker构建
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 发布
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: binaries-${{ github.ref_name }}
        path: dist/

    - name: Generate release notes
      id: release_notes
      run: |
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        echo "## PDF合并工具 ${{ github.ref_name }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 新功能" >> $GITHUB_OUTPUT
        echo "- 完整的PDF合并功能" >> $GITHUB_OUTPUT
        echo "- 跨平台支持 (Windows, macOS, Linux)" >> $GITHUB_OUTPUT
        echo "- 图形用户界面" >> $GITHUB_OUTPUT
        echo "- 命令行界面" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 技术特性" >> $GITHUB_OUTPUT
        echo "- 基于Go语言开发" >> $GITHUB_OUTPUT
        echo "- 使用PDFCPU库处理PDF" >> $GITHUB_OUTPUT
        echo "- 支持加密PDF文件" >> $GITHUB_OUTPUT
        echo "- 完整的错误处理和恢复机制" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 下载说明" >> $GITHUB_OUTPUT
        echo "请根据您的操作系统下载对应的版本：" >> $GITHUB_OUTPUT
        echo "- Windows: pdf-merger-${{ github.ref_name }}-windows-amd64.zip" >> $GITHUB_OUTPUT
        echo "- macOS: pdf-merger-${{ github.ref_name }}-darwin-amd64.zip" >> $GITHUB_OUTPUT
        echo "- Linux: pdf-merger-${{ github.ref_name }}-linux-amd64.zip" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: PDF合并工具 ${{ github.ref_name }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        files: |
          dist/*.zip
          dist/*.tar.gz
          dist/checksums.sha256
          dist/release-info.txt
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 部署到测试环境
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "部署到测试环境..."
        # 这里可以添加实际的部署逻辑
        # 例如：SSH到服务器，拉取Docker镜像，重启服务等

  # 部署到生产环境
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: startsWith(github.ref, 'refs/tags/')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "部署到生产环境..."
        # 这里可以添加实际的部署逻辑
